{
  "openapi": "3.1.0",
  "info": {
    "title": "Nebius OpenAI-compatible inference API",
    "version": "bcffe16"
  },
  "paths": {
    "/v1/models": {
      "get": {
        "summary": "List models",
        "description": "Lists the currently available models, and provides basic information about each one such as the owner and availability.",
        "operationId": "show_available_models_v1_models_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "verbose",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Verbose"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListModelResponse"
                },
                "example": {
                  "object": "list",
                  "data": [
                    {
                      "id": "meta-llama/Llama-3.3-70B-Instruct",
                      "created": 1717511223,
                      "object": "model",
                      "owned_by": "system"
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/completions": {
      "post": {
        "summary": "Create completion",
        "description": "Creates a model completion for the given input prompt.",
        "operationId": "create_completion_v1_completions_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompletionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompletionResponse"
                },
                "example": {
                  "id": "cmpl-bd18c4194f544c189578cfcb273a2f74",
                  "choices": [
                    {
                      "finish_reason": "stop",
                      "index": 0,
                      "message": {
                        "content": "Hello! It's nice to meet you. Is there something I can help you with, or would you like to chat?",
                        "role": "assistant"
                      }
                    }
                  ],
                  "created": 1717516032,
                  "model": "meta-llama/Llama-3.3-70B-Instruct",
                  "object": "chat.completion",
                  "usage": {
                    "completion_tokens": 26,
                    "prompt_tokens": 13,
                    "total_tokens": 39
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/chat/completions": {
      "post": {
        "summary": "Create chat completion",
        "description": "Creates a model response for the given chat conversation.",
        "operationId": "create_chat_completion_v1_chat_completions_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatCompletionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ChatCompletionResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ChatCompletionChunk"
                    }
                  ],
                  "title": "Response Create Chat Completion V1 Chat Completions Post"
                },
                "example": {
                  "id": "cmpl-bd18c4194f544c189578cfcb273a2f74",
                  "choices": [
                    {
                      "finish_reason": "stop",
                      "index": 0,
                      "message": {
                        "content": "Hello! It's nice to meet you. Is there something I can help you with, or would you like to chat?",
                        "role": "assistant"
                      }
                    }
                  ],
                  "created": 1717516032,
                  "model": "meta-llama/Llama-3.3-70B-Instruct",
                  "object": "chat.completion",
                  "usage": {
                    "completion_tokens": 26,
                    "prompt_tokens": 13,
                    "total_tokens": 39
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/embeddings": {
      "post": {
        "summary": "Create embeddings",
        "description": "Creates a model response for the given text.",
        "operationId": "create_embeddings_v1_embeddings_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddingResponse"
                },
                "example": {
                  "object": "list",
                  "data": [
                    {
                      "object": "embedding",
                      "embedding": [0.0023064255, -0.009327292, -0.0028842222],
                      "index": 0
                    }
                  ],
                  "model": "BAAI/bge-en-icl",
                  "usage": {
                    "prompt_tokens": 8,
                    "total_tokens": 8
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/batches": {
      "post": {
        "tags": [
          "Batch"
        ],
        "summary": "Create a batch operation",
        "operationId": "v1_create_batch_v1_batches_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchCreationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchCreationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "batch"
        ],
        "summary": "List user batches",
        "operationId": "v1_list_batches_v1_batches_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListBatchesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/batches/{batch_id}": {
      "get": {
        "tags": [
          "Batch"
        ],
        "summary": "Retrieve batch operation status",
        "operationId": "v1_check_batch_status_v1_batches__batch_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "batch_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Batch Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/batches/{batch_id}/cancel": {
      "post": {
        "tags": [
          "Batch"
        ],
        "summary": "Cancel a batch operation",
        "operationId": "v1_cancel_batch_v1_batches__batch_id__cancel_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "batch_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Batch Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/models": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "List of custom models",
        "description": "Lists the custom models",
        "operationId": "list_lora_models_v0_models_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CustomModelInfoResponse"
                  },
                  "type": "array",
                  "title": "Response List Lora Models V0 Models Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Models"
        ],
        "summary": "Create a custom model",
        "operationId": "v1_create_model_v0_models_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelCreationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateModelStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v0/models/{name}": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "Get a custom model by short name",
        "description": "Get a custom model model by short name",
        "operationId": "get_lora_model_v0_models__name__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomModelInfoResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Models"
        ],
        "summary": "Delete a model by short name",
        "operationId": "v1_delete_model_v0_models__name__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteModelStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/models/{vendor}/{full_name}": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "Get a custom model by full name",
        "description": "Get a custom model model by full name",
        "operationId": "get_lora_model_v0_models__vendor___full_name__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "full_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Full Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomModelInfoResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Models"
        ],
        "summary": "Delete a model by full name",
        "operationId": "v1_delete_model_v0_models__vendor___full_name__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "full_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Full Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteModelStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/files": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Upload file",
        "operationId": "upload_file_v1_files_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_file_v1_files_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIFile"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "List user files",
        "operationId": "list_user_files_v1_files_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "title": "Limit"
            }
          },
          {
            "name": "purpose",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/FilePurpose"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Purpose"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListFilesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/models/upload": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Upload custom model archive",
        "operationId": "upload_model_file_v0_models_upload_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_model_file_v0_models_upload_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIFile"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/files/{file_id}": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Retrieve file",
        "operationId": "get_file_info_v1_files__file_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "File Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIFile"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Files"
        ],
        "summary": "Delete file",
        "operationId": "delete_file_endpoint_v1_files__file_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "File Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileDeleted"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/files/{file_id}/content": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Retrieve file content",
        "operationId": "get_file_content_endpoint_v1_files__file_id__content_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "File Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/files/{file_id}/link": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Returns URL with link to download file content",
        "operationId": "get_file_link_v1_files__file_id__link_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "File Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileLink"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/images/generations": {
      "post": {
        "summary": "Generate",
        "operationId": "generate_v1_images_generations_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommonImageGenerationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageGenerationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/fine_tuning/jobs": {
      "post": {
        "tags": [
          "Fine-tuning"
        ],
        "summary": "Create a fine-tuning job",
        "description": "Creates a job that fine-tunes a specified model based on a given dataset.",
        "operationId": "create_fine_tuning_job_v1_fine_tuning_jobs_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FineTuningRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FineTuningJob"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Fine-tuning"
        ],
        "summary": "List fine-tuning jobs",
        "description": "Lists all fine-tuning jobs.",
        "operationId": "list_fine_tuning_jobs_v1_fine_tuning_jobs_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Limit"
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "After"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FineTuningJobListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/fine_tuning/jobs/{job_id}": {
      "get": {
        "tags": [
          "Fine-tuning"
        ],
        "summary": "Get fine-tuning job info",
        "description": "Get info about a fine-tuning job.",
        "operationId": "get_fine_tuning_job_v1_fine_tuning_jobs__job_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FineTuningJob"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/fine_tuning/jobs/{job_id}/cancel": {
      "post": {
        "tags": [
          "Fine-tuning"
        ],
        "summary": "Cancel fine-tuning job",
        "description": "Immediately cancel a fine-tuning job.",
        "operationId": "cancel_fine_tuning_job_v1_fine_tuning_jobs__job_id__cancel_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FineTuningJob"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/fine_tuning/jobs/{job_id}/events": {
      "get": {
        "tags": [
          "Fine-tuning"
        ],
        "summary": "List fine-tuning events",
        "description": "Get status updates for a fine-tuning job.",
        "operationId": "list_fine_tuning_events_v1_fine_tuning_jobs__job_id__events_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Job Id"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Limit"
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "After"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListEventsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/fine_tuning/jobs/{job_id}/checkpoints": {
      "get": {
        "tags": [
          "Fine-tuning"
        ],
        "summary": "List fine-tuning checkpoints",
        "description": "Get training checkpoints for a fine-tuning job.",
        "operationId": "list_fine_tuning_checkpoints_v1_fine_tuning_jobs__job_id__checkpoints_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Job Id"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Limit"
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "After"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCheckpointsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/fine_tuning/jobs/{job_id}/checkpoints/{checkpoint_id}": {
      "get": {
        "tags": [
          "Fine-tuning"
        ],
        "summary": "Get fine-tuning checkpoint",
        "description": "Get details about a specific checkpoint from a fine-tuning job.",
        "operationId": "get_fine_tuning_checkpoint_v1_fine_tuning_jobs__job_id__checkpoints__checkpoint_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Job Id"
            }
          },
          {
            "name": "checkpoint_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Checkpoint Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/openai__types__fine_tuning__jobs__fine_tuning_job_checkpoint__FineTuningJobCheckpoint"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Architecture": {
        "properties": {
          "modality": {
            "type": "string",
            "title": "Modality"
          },
          "tokenizer": {
            "type": "string",
            "title": "Tokenizer"
          },
          "instruct_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Instruct Type"
          }
        },
        "type": "object",
        "required": [
          "modality",
          "tokenizer",
          "instruct_type"
        ],
        "title": "Architecture"
      },
      "BaseModel": {
        "properties": {

        },
        "type": "object",
        "title": "BaseModel"
      },
      "BatchCreationRequest": {
        "properties": {
          "endpoint": {
            "type": "string",
            "title": "Endpoint"
          },
          "input_file_id": {
            "type": "string",
            "title": "Input File Id"
          },
          "completion_window": {
            "type": "string",
            "title": "Completion Window"
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          }
        },
        "type": "object",
        "required": [
          "endpoint",
          "input_file_id",
          "completion_window"
        ],
        "title": "BatchCreationRequest"
      },
      "BatchCreationResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "object": {
            "type": "string",
            "title": "Object"
          },
          "endpoint": {
            "type": "string",
            "title": "Endpoint"
          },
          "input_file_id": {
            "type": "string",
            "title": "Input File Id"
          },
          "completion_window": {
            "type": "string",
            "title": "Completion Window"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "created_at": {
            "type": "integer",
            "title": "Created At"
          },
          "request_counts": {
            "type": "object",
            "title": "Request Counts"
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          }
        },
        "type": "object",
        "required": [
          "id",
          "object",
          "endpoint",
          "input_file_id",
          "completion_window",
          "status",
          "created_at",
          "request_counts"
        ],
        "title": "BatchCreationResponse"
      },
      "BatchStatusResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "object": {
            "type": "string",
            "title": "Object"
          },
          "endpoint": {
            "type": "string",
            "title": "Endpoint"
          },
          "completion_window": {
            "type": "string",
            "title": "Completion Window"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "created_at": {
            "type": "integer",
            "title": "Created At"
          },
          "request_counts": {
            "type": "object",
            "title": "Request Counts"
          },
          "input_file_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Input File Id"
          },
          "output_file_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Output File Id"
          },
          "error_file_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error File Id"
          },
          "in_progress_at": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "In Progress At"
          },
          "finalizing_at": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Finalizing At"
          },
          "completed_at": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completed At"
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          }
        },
        "type": "object",
        "required": [
          "id",
          "object",
          "endpoint",
          "completion_window",
          "status",
          "created_at",
          "request_counts",
          "output_file_id",
          "error_file_id"
        ],
        "title": "BatchStatusResponse"
      },
      "Body_upload_file_v1_files_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          },
          "purpose": {
            "$ref": "#/components/schemas/FilePurpose"
          }
        },
        "type": "object",
        "required": [
          "file",
          "purpose"
        ],
        "title": "Body_upload_file_v1_files_post"
      },
      "Body_upload_model_file_v0_models_upload_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_upload_model_file_v0_models_upload_post"
      },
      "ChatCompletionChoice": {
        "properties": {
          "index": {
            "type": "integer",
            "title": "Index",
            "description": "The index of the choice in the list of choices."
          },
          "message": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatCompletionResponseMessage"
              }
            ],
            "description": "A chat completion message generated by the model."
          },
          "finish_reason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatCompletionFinishReason"
              }
            ],
            "description": "The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, `content_filter` if content was omitted due to a flag from our content filters."
          },
          "logprobs": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ChatCompletionLogprobs"
              },
              {
                "type": "null"
              }
            ],
            "description": "Log probability information for the choice."
          }
        },
        "type": "object",
        "required": [
          "index",
          "message",
          "finish_reason",
          "logprobs"
        ],
        "title": "ChatCompletionChoice"
      },
      "ChatCompletionChunk": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "A unique identifier for the chat completion. Each chunk has the same ID."
          },
          "choices": {
            "items": {
              "$ref": "#/components/schemas/ChatCompletionStreamChoice"
            },
            "type": "array",
            "title": "Choices",
            "description": "A list of chat completion choices. Can contain more than one elements if `n` is greater than 1. Can also be empty for the; last chunk if you set `stream_options: {\"include_usage\": true}`."
          },
          "created": {
            "type": "integer",
            "title": "Created",
            "description": "The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp."
          },
          "model": {
            "type": "string",
            "title": "Model",
            "description": "The model to generate the completion."
          },
          "system_fingerprint": {
            "type": "string",
            "title": "System Fingerprint",
            "description": "This fingerprint represents the backend configuration that the model runs with.; Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism."
          },
          "object": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatCompletionChunkObject"
              }
            ],
            "description": "The object type, which is always `chat.completion.chunk`."
          },
          "usage": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Usage"
              },
              {
                "type": "null"
              }
            ],
            "description": "An optional field that will only be present when you set `stream_options: {\"include_usage\": true}` in your request.; When present, it contains a null value except for the last chunk which contains the token usage statistics for the entire request."
          }
        },
        "type": "object",
        "required": [
          "id",
          "choices",
          "created",
          "model",
          "system_fingerprint",
          "object",
          "usage"
        ],
        "title": "ChatCompletionChunk"
      },
      "ChatCompletionChunkObject": {
        "type": "string",
        "enum": [
          "chat.completion.chunk"
        ],
        "const": "chat.completion.chunk",
        "title": "ChatCompletionChunkObject"
      },
      "ChatCompletionContentPartImageParam": {
        "properties": {
          "image_url": {
            "$ref": "#/components/schemas/ImageURL"
          },
          "type": {
            "type": "string",
            "enum": [
              "image_url"
            ],
            "const": "image_url",
            "title": "Type",
            "description": "The role of the author of this message."
          }
        },
        "type": "object",
        "required": [
          "image_url",
          "type"
        ],
        "title": "ChatCompletionContentPartImageParam"
      },
      "ChatCompletionContentPartTextParam": {
        "properties": {
          "text": {
            "type": "string",
            "title": "Text",
            "description": "The text content."
          },
          "type": {
            "type": "string",
            "enum": [
              "text"
            ],
            "const": "text",
            "title": "Type",
            "description": "The type of the content part."
          }
        },
        "type": "object",
        "required": [
          "text",
          "type"
        ],
        "title": "ChatCompletionContentPartTextParam"
      },
      "ChatCompletionContentPartVideoParam": {
        "properties": {
          "video_url": {
            "$ref": "#/components/schemas/ImageURL"
          },
          "type": {
            "type": "string",
            "enum": [
              "video_url"
            ],
            "const": "video_url",
            "title": "Type",
            "description": "The role of the author of this message."
          }
        },
        "type": "object",
        "required": [
          "video_url",
          "type"
        ],
        "title": "ChatCompletionContentPartVideoParam"
      },
      "ChatCompletionFinishReason": {
        "type": "string",
        "enum": [
          "stop",
          "length",
          "tool_calls",
          "content_filter"
        ],
        "title": "ChatCompletionFinishReason"
      },
      "ChatCompletionLogprobs": {
        "properties": {
          "content": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ChatCompletionTokenLogprob"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content",
            "description": "A list of message content tokens with log probability information."
          }
        },
        "type": "object",
        "required": [
          "content"
        ],
        "title": "ChatCompletionLogprobs"
      },
      "ChatCompletionMessage": {
        "properties": {
          "role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatMessageRole"
              }
            ],
            "description": "The role of the author of this message."
          },
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ChatCompletionContentPartTextParam"
                    },
                    {
                      "$ref": "#/components/schemas/ChatCompletionContentPartImageParam"
                    },
                    {
                      "$ref": "#/components/schemas/ChatCompletionContentPartVideoParam"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content",
            "description": "The contents of the message."
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role"
          },
          "tool_calls": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ToolCall"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Calls",
            "description": "The tool calls generated by the model, such as function calls."
          },
          "tool_call_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Call Id",
            "description": "Tool call that this message is responding to."
          }
        },
        "type": "object",
        "required": [
          "role"
        ],
        "title": "ChatCompletionMessage"
      },
      "ChatCompletionNamedFunction": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Specifies the name of the function the model should call."
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "ChatCompletionNamedFunction"
      },
      "ChatCompletionNamedToolChoice": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "function"
            ],
            "const": "function",
            "title": "Type",
            "description": "Specifies that the tool choice is a function.",
            "default": "function"
          },
          "function": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatCompletionNamedFunction"
              }
            ],
            "description": "Details the specific function to be called by the model."
          }
        },
        "type": "object",
        "required": [
          "function"
        ],
        "title": "ChatCompletionNamedToolChoice"
      },
      "ChatCompletionObject": {
        "type": "string",
        "enum": [
          "chat.completion"
        ],
        "const": "chat.completion",
        "title": "ChatCompletionObject"
      },
      "ChatCompletionRequest": {
        "properties": {
          "model": {
            "type": "string",
            "title": "Model",
            "description": "ID of the model to use.",
            "examples": [
              "meta-llama/Meta-Llama-3.1-70B-Instruct"
            ]
          },
          "store": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Store",
            "description": "Whether or not to store the output of this chat completion request for use in our model distillation.",
            "examples": [false]
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/ChatCompletionMessage"
            },
            "type": "array",
            "minItems": 1,
            "title": "Messages",
            "description": "A list of messages comprising the conversation so far. [Example Python code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models).",
            "examples": [
              [
                {
                  "content": "Hello!",
                  "role": "user"
                }
              ]
            ]
          },
          "max_tokens": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Tokens",
            "description": "The maximum number of tokens that can be generated in the completion.\n\nThe token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.",
            "examples": [100]
          },
          "temperature": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 2,
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Temperature",
            "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n\nWe generally recommend altering this or `top_p` but not both.",
            "default": 1
          },
          "top_p": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1,
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Top P",
            "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or `temperature` but not both.",
            "default": 1
          },
          "tools": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ChatCompletionTool"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tools"
          },
          "tool_choice": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "none"
                ],
                "const": "none"
              },
              {
                "type": "string",
                "enum": [
                  "auto"
                ],
                "const": "auto"
              },
              {
                "type": "string",
                "enum": [
                  "required"
                ],
                "const": "required"
              },
              {
                "$ref": "#/components/schemas/ChatCompletionNamedToolChoice"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Choice"
          },
          "n": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 128,
                "minimum": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "N",
            "description": "How many completions to generate for each prompt.\n\n**Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.",
            "default": 1
          },
          "stream": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stream",
            "description": "If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).",
            "default": false
          },
          "stream_options": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "boolean"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stream Options",
            "description": "If set to {\"include_usage\": True}, usage stats will be sent with the last chunk of data[Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions)",
            "examples": [null]
          },
          "stop": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stop",
            "description": "Up to 4 sequences where the API will stop generating further tokens.",
            "examples": [null]
          },
          "presence_penalty": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 2,
                "minimum": -2
              },
              {
                "type": "null"
              }
            ],
            "title": "Presence Penalty",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far,increasing the model's likelihood to talk about new topics.\n\n[See more information about frequency and presence penalties.](https://platform.openai.com/docs/guides/text-generation/parameter-details)",
            "default": 0
          },
          "frequency_penalty": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 2,
                "minimum": -2
              },
              {
                "type": "null"
              }
            ],
            "title": "Frequency Penalty",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.\n\n[See more information about frequency and presence penalties.](https://platform.openai.com/docs/guides/text-generation/parameter-details)",
            "default": 0
          },
          "logit_bias": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "integer"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logit Bias",
            "description": "Modify the likelihood of specified tokens appearing in the completion.\n\nAccepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.\n\nAs an example, you can pass `{\"50256\": -100}` to prevent the token from being generated.",
            "examples": [null]
          },
          "logprobs": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logprobs",
            "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`.",
            "default": false
          },
          "top_logprobs": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 20,
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Top Logprobs",
            "description": "An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.",
            "examples": [null]
          },
          "user": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User",
            "description": "A unique identifier representing your end-user, which can help us to monitor and detect abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).",
            "examples": [null]
          },
          "response_format": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/app__models__chat_completion__ResponseFormat"
              },
              {
                "type": "null"
              }
            ],
            "description": "Similar to chat completion, this parameter specifies the format of output. Only {'type': 'json_object'} or {'type': 'text' } is supported.",
            "examples": [null]
          },
          "guided_json": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/BaseModel"
              },
              {
                "type": "null"
              }
            ],
            "title": "Guided Json",
            "description": "If specified, the output will follow the JSON schema.",
            "examples": [null]
          },
          "guided_regex": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Guided Regex",
            "description": "If specified, the output will follow the regex pattern.",
            "examples": [null]
          },
          "guided_choice": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Guided Choice",
            "description": "If specified, the output will be exactly one of the choices.",
            "examples": [null]
          },
          "extra_body": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Extra Body",
            "description": "To provide extra parameters.",
            "examples": [null]
          },
          "service_tier": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ServiceTier"
              },
              {
                "type": "null"
              }
            ],
            "description": "The service tier to use for the request.",
            "default": "auto",
            "examples": [
              "auto",
              "flex"
            ]
          }
        },
        "type": "object",
        "required": [
          "model",
          "messages"
        ],
        "title": "ChatCompletionRequest"
      },
      "ChatCompletionResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "A unique identifier for the chat completion."
          },
          "object": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatCompletionObject"
              }
            ],
            "description": "The object type, which is always `chat.completion`."
          },
          "created": {
            "type": "integer",
            "title": "Created",
            "description": "The Unix timestamp (in seconds) of when the chat completion was created."
          },
          "model": {
            "type": "string",
            "title": "Model",
            "description": "The model used for the chat completion."
          },
          "choices": {
            "items": {
              "$ref": "#/components/schemas/ChatCompletionChoice"
            },
            "type": "array",
            "title": "Choices",
            "description": "A list of chat completion choices. Can be more than one if `n` is greater than 1."
          },
          "usage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Usage"
              }
            ],
            "description": "Usage statistics for the completion request."
          },
          "service_tier": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServiceTier"
              }
            ],
            "description": "The service tier used for the request."
          }
        },
        "type": "object",
        "required": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "service_tier"
        ],
        "title": "ChatCompletionResponse"
      },
      "ChatCompletionResponseMessage": {
        "properties": {
          "role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatMessageRole"
              }
            ],
            "description": "The role of the author of this message."
          },
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content",
            "description": "The contents of the message."
          },
          "tool_calls": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ToolCall"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Calls",
            "description": "The tool calls generated by the model, such as function calls."
          }
        },
        "type": "object",
        "required": [
          "role"
        ],
        "title": "ChatCompletionResponseMessage"
      },
      "ChatCompletionStreamChoice": {
        "properties": {
          "index": {
            "type": "integer",
            "title": "Index",
            "description": "The index of the choice in the list of choices."
          },
          "delta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatCompletionStreamResponseDelta"
              }
            ],
            "description": "A chat completion delta generated by streamed model responses."
          },
          "finish_reason": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ChatCompletionFinishReason"
              },
              {
                "type": "null"
              }
            ],
            "description": "The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, `content_filter` if content was omitted due to a flag from our content filters."
          },
          "logprobs": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ChatCompletionLogprobs"
              },
              {
                "type": "null"
              }
            ],
            "description": "Log probability information for the choice."
          }
        },
        "type": "object",
        "required": [
          "index",
          "delta",
          "finish_reason",
          "logprobs"
        ],
        "title": "ChatCompletionStreamChoice"
      },
      "ChatCompletionStreamResponseDelta": {
        "properties": {
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content",
            "description": "The contents of the chunk message."
          },
          "role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatMessageRole"
              }
            ],
            "description": "The role of the author of this message."
          },
          "tool_calls": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ToolCall"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Calls",
            "description": "The tool calls generated by the model, such as function calls."
          }
        },
        "type": "object",
        "required": [
          "role"
        ],
        "title": "ChatCompletionStreamResponseDelta"
      },
      "ChatCompletionTokenLogprob": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token",
            "description": "The token."
          },
          "logprob": {
            "type": "number",
            "title": "Logprob",
            "description": "The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely."
          },
          "bytes": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bytes",
            "description": "A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token."
          },
          "top_logprobs": {
            "items": {
              "$ref": "#/components/schemas/ChatCompletionTopLogprob"
            },
            "type": "array",
            "title": "Top Logprobs",
            "description": "List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned."
          }
        },
        "type": "object",
        "required": [
          "token",
          "logprob",
          "bytes",
          "top_logprobs"
        ],
        "title": "ChatCompletionTokenLogprob"
      },
      "ChatCompletionTool": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "function"
            ],
            "const": "function",
            "title": "Type",
            "description": "The type of the tool. Currently, only `function` is supported.",
            "default": "function"
          },
          "function": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FunctionObject"
              }
            ],
            "description": "Defines a tool the model can call, specifically a function in this context."
          }
        },
        "type": "object",
        "required": [
          "function"
        ],
        "title": "ChatCompletionTool"
      },
      "ChatCompletionTopLogprob": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token",
            "description": "The token."
          },
          "logprob": {
            "type": "number",
            "title": "Logprob",
            "description": "The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely."
          },
          "bytes": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bytes",
            "description": "A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token."
          }
        },
        "type": "object",
        "required": [
          "token",
          "logprob",
          "bytes"
        ],
        "title": "ChatCompletionTopLogprob"
      },
      "ChatMessageRole": {
        "type": "string",
        "enum": [
          "system",
          "user",
          "assistant",
          "tool"
        ],
        "title": "ChatMessageRole"
      },
      "CommonImageGenerationRequest": {
        "properties": {
          "model": {
            "type": "string",
            "title": "Model",
            "description": "ID of the model to use.",
            "examples": [
              "black-forest-labs/flux-schnell"
            ]
          },
          "loras": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/LoRA"
                },
                "type": "array",
                "maxItems": 10,
                "minItems": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Loras",
            "description": "List of publicly accessible LoRAs compatible with the selected model",
            "examples": [
              {
                "scale": 1,
                "url": "https://civitai.com/api/download/models/244808?type=Model&format=SafeTensor"
              }
            ]
          },
          "prompt": {
            "type": "string",
            "maxLength": 2000,
            "minLength": 1,
            "title": "Prompt",
            "description": "A text description of the desired image(s)."
          },
          "width": {
            "type": "integer",
            "maximum": 2048,
            "minimum": 64,
            "title": "Width",
            "description": "The width of the generated image(s) in pixels.",
            "default": 512
          },
          "height": {
            "type": "integer",
            "maximum": 2048,
            "minimum": 64,
            "title": "Height",
            "description": "The height of the generated image(s) in pixels.",
            "default": 512
          },
          "num_inference_steps": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 80,
                "minimum": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Num Inference Steps",
            "description": "Number of denoising steps in the diffusion process. Higher values generally result in higher quality images but take longer to generate."
          },
          "seed": {
            "type": "integer",
            "minimum": -1,
            "title": "Seed",
            "description": "Random seed for image generation. Use -1 for a random seed.",
            "default": -1
          },
          "guidance_scale": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 100,
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Guidance Scale",
            "description": "Guidance scale for the model. Higher values make the image adhere more closely to the prompt."
          },
          "negative_prompt": {
            "type": "string",
            "maxLength": 2000,
            "minLength": 0,
            "title": "Negative Prompt",
            "description": "A text description of the non-desired image(s).",
            "default": ""
          },
          "response_extension": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResponseExtension"
              }
            ],
            "description": "The format of the output image(s).",
            "default": "webp"
          },
          "response_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/app__repository__models__ResponseFormat"
              }
            ],
            "description": "The way output image will be returned.",
            "default": "url"
          }
        },
        "type": "object",
        "required": [
          "model",
          "prompt"
        ],
        "title": "CommonImageGenerationRequest"
      },
      "CompletionChoice": {
        "properties": {
          "index": {
            "type": "integer",
            "title": "Index",
            "description": "The index of the choice in the list of choices."
          },
          "text": {
            "type": "string",
            "title": "Text",
            "description": "A completion message generated by the model."
          },
          "finish_reason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CompletionFinishReason"
              }
            ],
            "description": "The reason the model stopped generating tokens."
          }
        },
        "type": "object",
        "required": [
          "index",
          "text",
          "finish_reason"
        ],
        "title": "CompletionChoice"
      },
      "CompletionFinishReason": {
        "type": "string",
        "enum": [
          "stop",
          "length",
          "content_filter"
        ],
        "title": "CompletionFinishReason"
      },
      "CompletionRequest": {
        "properties": {
          "model": {
            "type": "string",
            "title": "Model",
            "description": "ID of the model to use.",
            "examples": [
              "meta-llama/Meta-Llama-3.1-70B-Instruct"
            ]
          },
          "prompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ],
            "title": "Prompt",
            "description": "The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.",
            "examples": [
              "Say this is a test"
            ]
          },
          "stream": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stream",
            "description": "Enable response streaming.",
            "default": false
          },
          "stream_options": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "boolean"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stream Options",
            "description": "If set to {\"include_usage\": True}, usage stats will be sent with the last chunk of data",
            "examples": [null]
          },
          "max_tokens": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Tokens",
            "description": "Max completion token count",
            "examples": [100]
          },
          "temperature": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Temperature",
            "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.",
            "default": 1
          },
          "top_p": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Top P",
            "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.",
            "default": 1
          },
          "n": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "N",
            "description": "How many completions to generate for each prompt.",
            "default": 1
          },
          "logprobs": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logprobs",
            "description": "Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. So for example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response."
          },
          "echo": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Echo",
            "description": "Echo back the prompt in addition to the completion.",
            "default": false
          },
          "stop": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stop",
            "description": "Up to 4 sequences where the API will stop generating further tokens."
          },
          "presence_penalty": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Presence Penalty",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
            "default": 0
          },
          "frequency_penalty": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Frequency Penalty",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
            "default": 0
          },
          "logit_bias": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "number"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logit Bias",
            "description": "Modify the likelihood of specified tokens appearing in the completion. Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token."
          },
          "user": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User",
            "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse."
          },
          "extra_body": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Extra Body",
            "description": "To provide extra parameters.",
            "examples": [null]
          },
          "service_tier": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ServiceTier"
              },
              {
                "type": "null"
              }
            ],
            "description": "The service tier to use for the request.",
            "default": "auto",
            "examples": [
              "auto",
              "flex"
            ]
          }
        },
        "type": "object",
        "required": [
          "model",
          "prompt"
        ],
        "title": "CompletionRequest"
      },
      "CompletionResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "A unique identifier for the chat completion."
          },
          "object": {
            "type": "string",
            "title": "Object",
            "description": "The object type, which is always `text_completion`."
          },
          "created": {
            "type": "integer",
            "title": "Created",
            "description": "The Unix timestamp of when the completion was created."
          },
          "model": {
            "type": "string",
            "title": "Model",
            "description": "The model used for the chat completion."
          },
          "choices": {
            "items": {
              "$ref": "#/components/schemas/CompletionChoice"
            },
            "type": "array",
            "title": "Choices",
            "description": "A list of completion choices."
          },
          "usage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Usage"
              }
            ],
            "description": "Usage statistics for the completion request."
          },
          "service_tier": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServiceTier"
              }
            ],
            "description": "The service tier used for the request."
          }
        },
        "type": "object",
        "required": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "service_tier"
        ],
        "title": "CompletionResponse"
      },
      "CreateModelStatusResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The new model name.",
            "examples": [
              "meta-llama/Meta-Llama-3.1-8B-Instruct-LoRa:my-custom-model-udpd"
            ]
          },
          "base_model": {
            "type": "string",
            "title": "Base Model",
            "description": "The base model identifier the new model belongs to",
            "examples": [
              "meta-llama/Meta-Llama-3.1-8B-Instruct-fast"
            ]
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Checkpoint id from Fine-Tunes API, file id from Files API, or HuggingFace repo url",
            "examples": [
              "ftjob-1234567890:ftckpt_1234567890",
              "file-1234567890",
              "huggingface.co/sofrony/Llama-3.1-8B-Instruct-sofrony"
            ]
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "created_at": {
            "type": "integer",
            "title": "Created At"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModelStatus"
              }
            ],
            "description": "The status of the model",
            "examples": [
              "validating"
            ]
          }
        },
        "type": "object",
        "required": [
          "name",
          "base_model",
          "source",
          "created_at",
          "status"
        ],
        "title": "CreateModelStatusResponse"
      },
      "CustomModelInfoResponse": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "text2text"
            ],
            "const": "text2text",
            "title": "Type"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "status": {
            "$ref": "#/components/schemas/ModelStatus"
          },
          "logo_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logo Url"
          },
          "huggingface_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Huggingface Url"
          },
          "flavors": {
            "items": {
              "$ref": "#/components/schemas/VllmModelFlavor"
            },
            "type": "array",
            "title": "Flavors"
          },
          "fine_tune": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ModelFineTuneSettings"
              },
              {
                "type": "null"
              }
            ]
          },
          "vendor": {
            "type": "string",
            "title": "Vendor"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          },
          "use_cases": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Use Cases"
          },
          "context_window_k": {
            "type": "integer",
            "title": "Context Window K"
          },
          "size_b": {
            "type": "integer",
            "title": "Size B"
          },
          "quality": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Quality"
          },
          "policy_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Policy Url"
          },
          "license": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ModelLicense"
              },
              {
                "type": "null"
              }
            ]
          },
          "status_reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status Reason"
          },
          "checkpoint_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checkpoint Id"
          },
          "job_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Job Id"
          },
          "file_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "File Id"
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url"
          }
        },
        "type": "object",
        "required": [
          "type",
          "name",
          "status",
          "flavors",
          "vendor",
          "tags",
          "use_cases",
          "context_window_k",
          "size_b"
        ],
        "title": "CustomModelInfoResponse"
      },
      "DeleteModelStatusResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The new model name.",
            "examples": [
              "meta-llama/Meta-Llama-3.1-8B-Instruct-LoRa:my-custom-model-udpd"
            ]
          },
          "base_model": {
            "type": "string",
            "title": "Base Model",
            "description": "The base model identifier the new model belongs to",
            "examples": [
              "meta-llama/Meta-Llama-3.1-8B-Instruct-fast"
            ]
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Checkpoint id from Fine-Tunes API, file id from Files API, or HuggingFace repo url",
            "examples": [
              "ftjob-1234567890:ftckpt_1234567890",
              "file-1234567890",
              "huggingface.co/sofrony/Llama-3.1-8B-Instruct-sofrony"
            ]
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "created_at": {
            "type": "integer",
            "title": "Created At"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModelStatus"
              }
            ],
            "description": "The status of the model",
            "examples": [
              "deleted"
            ]
          }
        },
        "type": "object",
        "required": [
          "name",
          "base_model",
          "source",
          "created_at",
          "status"
        ],
        "title": "DeleteModelStatusResponse"
      },
      "Embedding": {
        "properties": {
          "object": {
            "type": "string",
            "title": "Object",
            "description": "Always 'embedding'."
          },
          "embedding": {
            "anyOf": [
              {
                "items": {
                  "type": "number"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ],
            "title": "Embedding",
            "description": "The embedding vector."
          },
          "index": {
            "type": "integer",
            "title": "Index",
            "description": "index of embedding"
          }
        },
        "type": "object",
        "required": [
          "object",
          "embedding",
          "index"
        ],
        "title": "Embedding"
      },
      "EmbeddingRequest": {
        "properties": {
          "model": {
            "type": "string",
            "title": "Model",
            "description": "ID of the model to use.",
            "examples": [
              "BAAI/bge-en-icl"
            ]
          },
          "input": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "items": {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                "type": "array"
              }
            ],
            "title": "Input",
            "description": "Input text to embed, encoded as a string or array of tokens.",
            "examples": [
              "What's a nice vector, Victor?"
            ]
          },
          "encoding_format": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Encoding Format",
            "description": "The format to return the embeddings in. Can be either float or base64.",
            "default": "float"
          },
          "user": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User",
            "description": "A unique identifier representing your end-user."
          },
          "service_tier": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ServiceTier"
              },
              {
                "type": "null"
              }
            ],
            "description": "The service tier to use for the request.",
            "default": "auto",
            "examples": [
              "auto",
              "flex"
            ]
          }
        },
        "type": "object",
        "required": [
          "model",
          "input"
        ],
        "title": "EmbeddingRequest"
      },
      "EmbeddingResponse": {
        "properties": {
          "object": {
            "type": "string",
            "title": "Object",
            "description": "always 'list'."
          },
          "model": {
            "type": "string",
            "title": "Model",
            "description": "The model used for the embedding."
          },
          "usage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Usage"
              }
            ],
            "description": "Token usage stats."
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/Embedding"
            },
            "type": "array",
            "title": "Data",
            "description": "List of Embedding objects"
          },
          "service_tier": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServiceTier"
              }
            ],
            "description": "The service tier used for the request."
          }
        },
        "type": "object",
        "required": [
          "object",
          "model",
          "usage",
          "data",
          "service_tier"
        ],
        "title": "EmbeddingResponse"
      },
      "Error": {
        "properties": {
          "code": {
            "type": "string",
            "title": "Code"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "param": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Param"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "title": "Error"
      },
      "FileDeleted": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "deleted": {
            "type": "boolean",
            "title": "Deleted"
          },
          "object": {
            "type": "string",
            "title": "Object",
            "default": "file"
          }
        },
        "type": "object",
        "required": [
          "id",
          "deleted"
        ],
        "title": "FileDeleted"
      },
      "FileLink": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url"
          }
        },
        "type": "object",
        "required": [
          "url"
        ],
        "title": "FileLink"
      },
      "FilePurpose": {
        "type": "string",
        "enum": [
          "batch",
          "fine-tune"
        ],
        "title": "FilePurpose"
      },
      "FineTuningJob": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "created_at": {
            "type": "integer",
            "title": "Created At"
          },
          "error": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Error"
              },
              {
                "type": "null"
              }
            ]
          },
          "finished_at": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Finished At"
          },
          "hyperparameters": {
            "$ref": "#/components/schemas/Hyperparameters"
          },
          "integrations": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/WandbIntegrationResponse"
                    },
                    {
                      "$ref": "#/components/schemas/MlflowIntegrationResponse"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Integrations"
          },
          "model": {
            "type": "string",
            "title": "Model"
          },
          "object": {
            "type": "string",
            "enum": [
              "fine_tuning.job"
            ],
            "const": "fine_tuning.job",
            "title": "Object",
            "default": "fine_tuning.job"
          },
          "organization_id": {
            "type": "string",
            "title": "Organization Id",
            "default": ""
          },
          "result_files": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Result Files",
            "default": []
          },
          "seed": {
            "type": "integer",
            "title": "Seed",
            "default": 0
          },
          "suffix": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 64
              },
              {
                "type": "null"
              }
            ],
            "title": "Suffix"
          },
          "status": {
            "type": "string",
            "enum": [
              "validating_files",
              "queued",
              "running",
              "succeeded",
              "failed",
              "cancelled"
            ],
            "title": "Status"
          },
          "trained_tokens": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Trained Tokens"
          },
          "training_file": {
            "type": "string",
            "title": "Training File"
          },
          "validation_file": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Validation File"
          },
          "estimated_finish": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Estimated Finish"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "id",
          "created_at",
          "hyperparameters",
          "model",
          "status",
          "training_file"
        ],
        "title": "FineTuningJob"
      },
      "FineTuningJobEvent": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "created_at": {
            "type": "integer",
            "title": "Created At"
          },
          "level": {
            "type": "string",
            "enum": [
              "info",
              "warn",
              "error"
            ],
            "title": "Level"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "object": {
            "type": "string",
            "enum": [
              "fine_tuning.job.event"
            ],
            "const": "fine_tuning.job.event",
            "title": "Object"
          },
          "data": {
            "anyOf": [
              {

              },
              {
                "type": "null"
              }
            ],
            "title": "Data"
          },
          "type": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "message",
                  "metrics"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Type"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "id",
          "created_at",
          "level",
          "message",
          "object"
        ],
        "title": "FineTuningJobEvent"
      },
      "FineTuningJobListResponse": {
        "properties": {
          "object": {
            "type": "string",
            "title": "Object",
            "description": "The object type, which is always 'list'",
            "default": "list"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/FineTuningJob"
            },
            "type": "array",
            "title": "Data",
            "description": "List of fine-tuning jobs"
          },
          "has_more": {
            "type": "boolean",
            "title": "Has More",
            "description": "Whether there are more jobs to fetch"
          }
        },
        "type": "object",
        "required": [
          "data",
          "has_more"
        ],
        "title": "FineTuningJobListResponse"
      },
      "FineTuningRequest": {
        "properties": {
          "model": {
            "type": "string",
            "title": "Model",
            "description": "The name of the model to fine-tune",
            "examples": [
              "meta-llama/Llama-3.1-70B-Instruct",
              "meta-llama/Llama-3.1-70B",
              "meta-llama/Llama-3.1-8B-Instruct",
              "meta-llama/Llama-3.1-8B"
            ]
          },
          "training_file": {
            "type": "string",
            "title": "Training File",
            "description": "The ID of the uploaded training data file",
            "examples": [
              "file_123456"
            ]
          },
          "validation_file": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Validation File",
            "description": "The ID of the uploaded validation data file",
            "examples": [
              "file_123456"
            ]
          },
          "hyperparameters": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Hyperparameters"
              },
              {
                "type": "null"
              }
            ],
            "description": "Training hyperparameters"
          },
          "integrations": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/WandbIntegrationRequest"
                    },
                    {
                      "$ref": "#/components/schemas/MlflowIntegrationRequest"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Integrations",
            "description": "Job integration paramaters"
          },
          "seed": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Seed",
            "description": "The seed controls the reproducibility of the job",
            "examples": [42]
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags",
            "description": "List of tags to associate with the job",
            "examples": [
              "my-ft-job"
            ]
          },
          "extra_body": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Extra Body",
            "description": "Extra params to pass to the fine-tuning job"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "model",
          "training_file"
        ],
        "title": "FineTuningRequest"
      },
      "FunctionCall": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "arguments": {
            "type": "string",
            "title": "Arguments"
          }
        },
        "type": "object",
        "required": [
          "name",
          "arguments"
        ],
        "title": "FunctionCall"
      },
      "FunctionObject": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "A description of what the function does, used by the model to choose when and how to call the function."
          },
          "parameters": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parameters",
            "description": "The parameters the function accepts, described as a JSON Schema object. See the guide for examples, and the JSON Schema reference for documentation about the format."
          },
          "strict": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Strict",
            "description": "Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the parameters field. Only a subset of JSON Schema is supported when strict is true."
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "FunctionObject"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "Hyperparameters": {
        "properties": {
          "batch_size": {
            "type": "integer",
            "maximum": 32,
            "minimum": 1,
            "title": "Batch Size",
            "description": "Batch size for training",
            "default": 8
          },
          "learning_rate": {
            "type": "number",
            "minimum": 0,
            "title": "Learning Rate",
            "description": "Learning rate for training",
            "default": 0.00001
          },
          "n_epochs": {
            "type": "integer",
            "maximum": 20,
            "minimum": 1,
            "title": "N Epochs",
            "description": "Number of epochs for training",
            "default": 3
          },
          "warmup_ratio": {
            "type": "number",
            "maximum": 1,
            "minimum": 0,
            "title": "Warmup Ratio",
            "description": "Warmup ratio for learning rate",
            "default": 0
          },
          "weight_decay": {
            "type": "number",
            "minimum": 0,
            "title": "Weight Decay",
            "description": "Weight decay for optimizer",
            "default": 0
          },
          "lora": {
            "type": "boolean",
            "title": "Lora",
            "description": "Whether to use LoRA (Low-Rank Adaptation) for training",
            "default": false
          },
          "lora_r": {
            "type": "integer",
            "maximum": 128,
            "minimum": 8,
            "title": "Lora R",
            "description": "Rank for LoRA",
            "default": 8
          },
          "lora_alpha": {
            "type": "integer",
            "minimum": 8,
            "title": "Lora Alpha",
            "description": "Alpha parameter for LoRA",
            "default": 8
          },
          "lora_dropout": {
            "type": "number",
            "maximum": 1,
            "minimum": 0,
            "title": "Lora Dropout",
            "description": "Dropout rate for LoRA",
            "default": 0
          },
          "packing": {
            "type": "boolean",
            "title": "Packing",
            "description": "Whether to use packing for training",
            "default": true
          },
          "max_grad_norm": {
            "type": "number",
            "exclusiveMinimum": 0,
            "title": "Max Grad Norm",
            "description": "Maximum gradient norm for optimizer",
            "default": 1
          },
          "context_length": {
            "type": "integer",
            "maximum": 131072,
            "minimum": 8192,
            "title": "Context Length",
            "description": "Context length for training",
            "default": 8192
          }
        },
        "additionalProperties": true,
        "type": "object",
        "title": "Hyperparameters"
      },
      "ImageGenerationResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ImageObject"
            },
            "type": "array",
            "title": "Data"
          },
          "id": {
            "type": "string",
            "title": "Id"
          }
        },
        "type": "object",
        "required": [
          "data",
          "id"
        ],
        "title": "ImageGenerationResponse"
      },
      "ImageObject": {
        "properties": {
          "b64_json": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "B64 Json"
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url"
          }
        },
        "type": "object",
        "title": "ImageObject"
      },
      "ImageURL": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url",
            "description": "Either a URL of the image or the base64 encoded image data."
          },
          "detail": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "auto",
                  "low",
                  "high"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Detail",
            "description": "Specifies the detail level of the image."
          }
        },
        "type": "object",
        "required": [
          "url"
        ],
        "title": "ImageURL"
      },
      "JsonSchemaResponseFormat": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "schema": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Schema"
          },
          "strict": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Strict"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "JsonSchemaResponseFormat"
      },
      "ListBatchesResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/BatchStatusResponse"
            },
            "type": "array",
            "title": "Data"
          },
          "first_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "First Id"
          },
          "last_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Id"
          },
          "has_more": {
            "type": "boolean",
            "title": "Has More"
          },
          "object": {
            "type": "string",
            "title": "Object",
            "default": "list"
          }
        },
        "type": "object",
        "required": [
          "data",
          "first_id",
          "last_id",
          "has_more"
        ],
        "title": "ListBatchesResponse"
      },
      "ListCheckpointsResponse": {
        "properties": {
          "object": {
            "type": "string",
            "title": "Object",
            "default": "list"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/app__models__fine_tuning__FineTuningJobCheckpoint"
            },
            "type": "array",
            "title": "Data"
          },
          "first_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "First Id"
          },
          "last_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Id"
          },
          "has_more": {
            "type": "boolean",
            "title": "Has More",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "ListCheckpointsResponse"
      },
      "ListEventsResponse": {
        "properties": {
          "object": {
            "type": "string",
            "title": "Object",
            "description": "The object type, which is always 'list'",
            "default": "list"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/FineTuningJobEvent"
            },
            "type": "array",
            "title": "Data"
          },
          "has_more": {
            "type": "boolean",
            "title": "Has More",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "ListEventsResponse"
      },
      "ListFilesResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OpenAIFile"
            },
            "type": "array",
            "title": "Data"
          },
          "object": {
            "type": "string",
            "title": "Object",
            "default": "list"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "ListFilesResponse"
      },
      "ListModelResponse": {
        "properties": {
          "object": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ListObject"
              }
            ],
            "description": "The object type, which is always `list`."
          },
          "data": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Model"
                },
                {
                  "$ref": "#/components/schemas/RichModel"
                }
              ]
            },
            "type": "array",
            "title": "Data",
            "description": "A list of currently available models."
          }
        },
        "type": "object",
        "required": [
          "object",
          "data"
        ],
        "title": "ListModelResponse"
      },
      "ListObject": {
        "type": "string",
        "enum": [
          "list"
        ],
        "const": "list",
        "title": "ListObject"
      },
      "LoRA": {
        "properties": {
          "url": {
            "type": "string",
            "maxLength": 1000,
            "minLength": 1,
            "title": "Url",
            "description": "LoRA .safetensors URL"
          },
          "scale": {
            "type": "number",
            "maximum": 1000,
            "minimum": 0,
            "title": "Scale",
            "description": "Scale of LoRA weights"
          }
        },
        "type": "object",
        "required": [
          "url",
          "scale"
        ],
        "title": "LoRA"
      },
      "Metrics": {
        "properties": {
          "full_valid_loss": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Full Valid Loss"
          },
          "full_valid_mean_token_accuracy": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Full Valid Mean Token Accuracy"
          },
          "step": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Step"
          },
          "train_loss": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Train Loss"
          },
          "train_mean_token_accuracy": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Train Mean Token Accuracy"
          },
          "valid_loss": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Valid Loss"
          },
          "valid_mean_token_accuracy": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Valid Mean Token Accuracy"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "title": "Metrics"
      },
      "MlflowConfigRequest": {
        "properties": {
          "tracking_uri": {
            "type": "string",
            "title": "Tracking Uri"
          },
          "experiment_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Experiment Name"
          },
          "run_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Run Name"
          },
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Tags"
          },
          "certificate_file": {
            "type": "string",
            "title": "Certificate File"
          },
          "certificate_file_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Certificate File Id"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          }
        },
        "type": "object",
        "required": [
          "tracking_uri",
          "experiment_name",
          "run_name",
          "certificate_file",
          "username",
          "password"
        ],
        "title": "MlflowConfigRequest"
      },
      "MlflowConfigResponse": {
        "properties": {
          "tracking_uri": {
            "type": "string",
            "title": "Tracking Uri"
          },
          "experiment_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Experiment Name"
          },
          "run_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Run Name"
          },
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Tags"
          }
        },
        "type": "object",
        "required": [
          "tracking_uri",
          "experiment_name",
          "run_name"
        ],
        "title": "MlflowConfigResponse"
      },
      "MlflowIntegrationRequest": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mlflow"
            ],
            "const": "mlflow",
            "title": "Type",
            "default": "mlflow"
          },
          "mlflow": {
            "$ref": "#/components/schemas/MlflowConfigRequest"
          }
        },
        "type": "object",
        "required": [
          "mlflow"
        ],
        "title": "MlflowIntegrationRequest"
      },
      "MlflowIntegrationResponse": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mlflow"
            ],
            "const": "mlflow",
            "title": "Type",
            "default": "mlflow"
          },
          "mlflow": {
            "$ref": "#/components/schemas/MlflowConfigResponse"
          }
        },
        "type": "object",
        "required": [
          "mlflow"
        ],
        "title": "MlflowIntegrationResponse"
      },
      "Model": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The model identifier, which can be referenced in the API endpoints."
          },
          "created": {
            "type": "integer",
            "title": "Created",
            "description": "The Unix timestamp (in seconds) when the model was created."
          },
          "object": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModelObject"
              }
            ],
            "description": "The object type, which is always 'model'."
          },
          "owned_by": {
            "type": "string",
            "title": "Owned By",
            "description": "The organization that owns the model."
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ModelStatus"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "id",
          "created",
          "object",
          "owned_by"
        ],
        "title": "Model"
      },
      "ModelCreationRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The new model name.",
            "examples": [
              "my-custom-model"
            ]
          },
          "base_model": {
            "type": "string",
            "title": "Base Model",
            "description": "The base model identifier the new model belongs to",
            "examples": [
              "meta-llama/Meta-Llama-3.1-8B-Instruct-fast"
            ]
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Checkpoint id from Fine-Tunes API, file id from Files API, or HuggingFace repo url",
            "examples": [
              "ftjob-1234567890:ftckpt_1234567890",
              "file-1234567890",
              "huggingface.co/sofrony/Llama-3.1-8B-Instruct-sofrony"
            ]
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "name",
          "base_model",
          "source"
        ],
        "title": "ModelCreationRequest"
      },
      "ModelFineTuneSettings": {
        "properties": {
          "model_id": {
            "type": "string",
            "title": "Model Id"
          },
          "training_price_per_million_tokens": {
            "type": "number",
            "title": "Training Price Per Million Tokens"
          }
        },
        "type": "object",
        "required": [
          "model_id",
          "training_price_per_million_tokens"
        ],
        "title": "ModelFineTuneSettings"
      },
      "ModelLicense": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "name": {
            "type": "string",
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "url",
          "type",
          "name"
        ],
        "title": "ModelLicense"
      },
      "ModelLimits": {
        "properties": {
          "tokens_per_minute": {
            "type": "number",
            "title": "Tokens Per Minute",
            "default": 0
          },
          "requests_per_minute": {
            "type": "number",
            "title": "Requests Per Minute"
          },
          "burst_ratio": {
            "type": "number",
            "title": "Burst Ratio",
            "default": 1
          },
          "user_specific": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ModelLimitsBase"
            },
            "type": "object",
            "title": "User Specific"
          }
        },
        "type": "object",
        "required": [
          "requests_per_minute"
        ],
        "title": "ModelLimits"
      },
      "ModelLimitsBase": {
        "properties": {
          "tokens_per_minute": {
            "type": "number",
            "title": "Tokens Per Minute",
            "default": 0
          },
          "requests_per_minute": {
            "type": "number",
            "title": "Requests Per Minute"
          },
          "burst_ratio": {
            "type": "number",
            "title": "Burst Ratio",
            "default": 1
          }
        },
        "type": "object",
        "required": [
          "requests_per_minute"
        ],
        "title": "ModelLimitsBase"
      },
      "ModelObject": {
        "type": "string",
        "enum": [
          "model"
        ],
        "const": "model",
        "title": "ModelObject"
      },
      "ModelStatus": {
        "type": "string",
        "enum": [
          "validating",
          "active",
          "error",
          "deleted"
        ],
        "title": "ModelStatus",
        "description": "Enum representing the possible statuses of a model."
      },
      "ModelType": {
        "type": "string",
        "enum": [
          "text2image",
          "embedding",
          "text2text",
          "guard",
          "image2text",
          "image2video"
        ],
        "title": "ModelType"
      },
      "OpenAIFile": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "bytes": {
            "type": "integer",
            "title": "Bytes"
          },
          "created_at": {
            "type": "integer",
            "title": "Created At"
          },
          "filename": {
            "type": "string",
            "title": "Filename"
          },
          "object": {
            "type": "string",
            "title": "Object",
            "default": "file"
          },
          "purpose": {
            "type": "string",
            "title": "Purpose"
          }
        },
        "type": "object",
        "required": [
          "id",
          "bytes",
          "created_at",
          "filename",
          "purpose"
        ],
        "title": "OpenAIFile"
      },
      "Pricing": {
        "properties": {
          "prompt": {
            "type": "string",
            "title": "Prompt",
            "default": "0"
          },
          "completion": {
            "type": "string",
            "title": "Completion",
            "default": "0"
          },
          "image": {
            "type": "string",
            "title": "Image",
            "default": "0"
          },
          "price_per_video_second": {
            "type": "string",
            "title": "Price Per Video Second",
            "default": "0"
          },
          "request": {
            "type": "string",
            "title": "Request",
            "default": "0"
          }
        },
        "type": "object",
        "title": "Pricing"
      },
      "QuantizationType": {
        "type": "string",
        "enum": [
          "int4",
          "int4",
          "fp4",
          "fp6",
          "fp8",
          "fp16",
          "bf16",
          "fp32"
        ],
        "title": "QuantizationType",
        "description": "Allowed quantization types according to https://openrouter.ai/docs/use-cases/for-providers."
      },
      "ResponseExtension": {
        "type": "string",
        "enum": [
          "webp",
          "jpg",
          "png"
        ],
        "title": "ResponseExtension"
      },
      "RichModel": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "created": {
            "type": "integer",
            "title": "Created"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "context_length": {
            "type": "integer",
            "title": "Context Length"
          },
          "architecture": {
            "$ref": "#/components/schemas/Architecture"
          },
          "quantization": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/QuantizationType"
              },
              {
                "type": "null"
              }
            ]
          },
          "pricing": {
            "$ref": "#/components/schemas/Pricing"
          },
          "per_request_limits": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Per Request Limits"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ModelStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "status_reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status Reason"
          },
          "object": {
            "type": "string",
            "title": "Object",
            "default": "model"
          },
          "owned_by": {
            "type": "string",
            "title": "Owned By",
            "default": "system"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "created",
          "description",
          "context_length",
          "architecture",
          "pricing"
        ],
        "title": "RichModel"
      },
      "ServiceTier": {
        "type": "string",
        "enum": [
          "auto",
          "default",
          "over-limit",
          "flex"
        ],
        "title": "ServiceTier",
        "description": "Represents the service tier for requests.\n\nAttributes:\n    Auto: Automatically choose the best available tier for the request (Default or OverLimit).\n    Analyze response to determine which tier was used.\n    Default: Return 429 errors on hitting the rate limit, do not exceed to the OverLimit tier.\n    OverLimit: Indicate that the request was over the user limit.\n            This tier cannot be set by user in the request, but us used in a response for tier=Auto.\n    Flex: Do not consume rate-limit credits, but run with lower priority. May still result in 429 errors\n    in case of if there is no resources to process."
      },
      "ToolCall": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "type": {
            "type": "string",
            "enum": [
              "function"
            ],
            "const": "function",
            "title": "Type",
            "default": "function"
          },
          "function": {
            "$ref": "#/components/schemas/FunctionCall"
          }
        },
        "type": "object",
        "required": [
          "function"
        ],
        "title": "ToolCall"
      },
      "Usage": {
        "properties": {
          "completion_tokens": {
            "type": "integer",
            "title": "Completion Tokens",
            "description": "Number of tokens in the generated completion."
          },
          "prompt_tokens": {
            "type": "integer",
            "title": "Prompt Tokens",
            "description": "Number of tokens in the prompt."
          },
          "total_tokens": {
            "type": "integer",
            "title": "Total Tokens",
            "description": "Total number of tokens used in the request (prompt + completion)."
          }
        },
        "type": "object",
        "required": [
          "completion_tokens",
          "prompt_tokens",
          "total_tokens"
        ],
        "title": "Usage"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "VllmModelFlavor": {
        "properties": {
          "model_id": {
            "type": "string",
            "title": "Model Id"
          },
          "quantization": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/QuantizationType"
              },
              {
                "type": "null"
              }
            ]
          },
          "model_type": {
            "$ref": "#/components/schemas/ModelType"
          },
          "model_name": {
            "type": "string",
            "title": "Model Name"
          },
          "label": {
            "type": "string",
            "title": "Label"
          },
          "input_price_per_million_tokens": {
            "type": "number",
            "title": "Input Price Per Million Tokens"
          },
          "output_price_per_million_tokens": {
            "type": "number",
            "title": "Output Price Per Million Tokens"
          },
          "tokens_per_second": {
            "type": "number",
            "title": "Tokens Per Second"
          },
          "input_tps": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Input Tps"
          },
          "limits": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ModelLimits"
              },
              {
                "type": "null"
              }
            ]
          },
          "max_model_len": {
            "type": "integer",
            "title": "Max Model Len"
          },
          "owners": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Owners"
          },
          "supports_lora_adapters": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Supports Lora Adapters"
          }
        },
        "type": "object",
        "required": [
          "model_id",
          "model_type",
          "model_name",
          "label",
          "input_price_per_million_tokens",
          "output_price_per_million_tokens",
          "tokens_per_second",
          "max_model_len"
        ],
        "title": "VllmModelFlavor"
      },
      "WandbConfigRequest": {
        "properties": {
          "project": {
            "type": "string",
            "title": "Project"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "entity": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Entity"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          },
          "api_key": {
            "type": "string",
            "title": "Api Key"
          }
        },
        "type": "object",
        "required": [
          "project",
          "api_key"
        ],
        "title": "WandbConfigRequest"
      },
      "WandbConfigResponse": {
        "properties": {
          "project": {
            "type": "string",
            "title": "Project"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "entity": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Entity"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          }
        },
        "type": "object",
        "required": [
          "project"
        ],
        "title": "WandbConfigResponse"
      },
      "WandbIntegrationRequest": {
        "properties": {
          "type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "wandb"
                ],
                "const": "wandb"
              }
            ],
            "title": "Type",
            "default": "wandb"
          },
          "wandb": {
            "$ref": "#/components/schemas/WandbConfigRequest"
          }
        },
        "type": "object",
        "required": [
          "wandb"
        ],
        "title": "WandbIntegrationRequest"
      },
      "WandbIntegrationResponse": {
        "properties": {
          "type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "wandb"
                ],
                "const": "wandb"
              }
            ],
            "title": "Type",
            "default": "wandb"
          },
          "wandb": {
            "$ref": "#/components/schemas/WandbConfigResponse"
          }
        },
        "type": "object",
        "required": [
          "wandb"
        ],
        "title": "WandbIntegrationResponse"
      },
      "app__models__chat_completion__ResponseFormat": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "text",
              "json_object",
              "json_schema"
            ],
            "title": "Type"
          },
          "json_schema": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/JsonSchemaResponseFormat"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "ResponseFormat"
      },
      "app__models__fine_tuning__FineTuningJobCheckpoint": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "created_at": {
            "type": "integer",
            "title": "Created At"
          },
          "fine_tuned_model_checkpoint": {
            "type": "string",
            "title": "Fine Tuned Model Checkpoint"
          },
          "fine_tuning_job_id": {
            "type": "string",
            "title": "Fine Tuning Job Id"
          },
          "metrics": {
            "$ref": "#/components/schemas/Metrics"
          },
          "object": {
            "type": "string",
            "enum": [
              "fine_tuning.job.checkpoint"
            ],
            "const": "fine_tuning.job.checkpoint",
            "title": "Object"
          },
          "step_number": {
            "type": "integer",
            "title": "Step Number"
          },
          "result_files": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Result Files"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "id",
          "created_at",
          "fine_tuned_model_checkpoint",
          "fine_tuning_job_id",
          "metrics",
          "object",
          "step_number",
          "result_files"
        ],
        "title": "FineTuningJobCheckpoint"
      },
      "app__repository__models__ResponseFormat": {
        "type": "string",
        "enum": [
          "b64_json",
          "url"
        ],
        "title": "ResponseFormat"
      },
      "openai__types__fine_tuning__jobs__fine_tuning_job_checkpoint__FineTuningJobCheckpoint": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "created_at": {
            "type": "integer",
            "title": "Created At"
          },
          "fine_tuned_model_checkpoint": {
            "type": "string",
            "title": "Fine Tuned Model Checkpoint"
          },
          "fine_tuning_job_id": {
            "type": "string",
            "title": "Fine Tuning Job Id"
          },
          "metrics": {
            "$ref": "#/components/schemas/Metrics"
          },
          "object": {
            "type": "string",
            "enum": [
              "fine_tuning.job.checkpoint"
            ],
            "const": "fine_tuning.job.checkpoint",
            "title": "Object"
          },
          "step_number": {
            "type": "integer",
            "title": "Step Number"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "id",
          "created_at",
          "fine_tuned_model_checkpoint",
          "fine_tuning_job_id",
          "metrics",
          "object",
          "step_number"
        ],
        "title": "FineTuningJobCheckpoint"
      }
    },
    "securitySchemes": {
      "HTTPBearer": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}